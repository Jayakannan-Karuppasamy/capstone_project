CREATE TABLE USERS(
	USERID INT(50) NOT NULL AUTO_INCREMENT,
	USERNAME VARCHAR(60) NOT NULL,
	PASSWORD VARCHAR(60) NOT NULL,
	ENABLED TINYINT(1) NOT NULL,
	PRIMARY KEY (USERID));
	
CREATE TABLE AUTHORITY(
	AUTHID INT(50) NOT NULL,
	ROLENAME VARCHAR(50) NOT NULL,
	PRIMARY KEY (AUTHID));
	
CREATE TABLE USER_AUTHORITY(
	AUTHID INT(50) NOT NULL ,
	USERID INT(50) NOT NULL
    );	
jk@123

INSERT INTO `users` (userid, username, password, enabled) VALUES (1,'jkannan','$2y$12$3JbuSSDR8y7Eu.8.hAXfNOGzAw64xC17WgG.D7Zwa9MzAJRsWKMsG',1); 
INSERT INTO `users` (userid, username, password, enabled) VALUES (2,'jk','$2y$12$3JbuSSDR8y7Eu.8.hAXfNOGzAw64xC17WgG.D7Zwa9MzAJRsWKMsG',1); 
select * from users;
select * from authority;
select * from user_authority;
INSERT INTO `authority`(AUTHID, ROLENAME) VALUES (1,'ROLE_ADMIN');
INSERT INTO `authority`(AUTHID, ROLENAME) VALUES (2,'ROLE_USER');
INSERT INTO `user_authority`(AUTHID, USERID) VALUES (1, 1);
INSERT INTO `user_authority`(AUTHID, USERID) VALUES (2, 2);

# Spring batch Tables
CREATE TABLE BATCH_STEP_EXECUTION_SEQ (ID BIGINT NOT NULL);
CREATE TABLE BATCH_JOB_EXECUTION_SEQ (ID BIGINT NOT NULL);
CREATE TABLE BATCH_JOB_SEQ (ID BIGINT NOT NULL);
INSERT INTO BATCH_STEP_EXECUTION_SEQ values(0);
INSERT INTO BATCH_JOB_EXECUTION_SEQ values(0);
INSERT INTO BATCH_JOB_SEQ values(0);
# select * from BATCH_STEP_EXECUTION_SEQ;
# select * from BATCH_JOB_EXECUTION_SEQ;
# select * from BATCH_JOB_SEQ;

CREATE TABLE BATCH_JOB_INSTANCE  (
  JOB_INSTANCE_ID BIGINT  PRIMARY KEY ,
  VERSION BIGINT,
  JOB_NAME VARCHAR(100) NOT NULL ,
  JOB_KEY VARCHAR(2500)
);

CREATE TABLE BATCH_JOB_EXECUTION  (
  JOB_EXECUTION_ID BIGINT  PRIMARY KEY ,
  VERSION BIGINT,
  JOB_INSTANCE_ID BIGINT NOT NULL,
  CREATE_TIME TIMESTAMP NOT NULL,
  START_TIME TIMESTAMP  NULL,
  END_TIME TIMESTAMP  NULL,
  STATUS VARCHAR(10),
  EXIT_CODE VARCHAR(20),
  EXIT_MESSAGE VARCHAR(2500),
  LAST_UPDATED TIMESTAMP,
  JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
  constraint JOB_INSTANCE_EXECUTION_FK foreign key (JOB_INSTANCE_ID)
  references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
        JOB_EXECUTION_ID BIGINT NOT NULL ,
        TYPE_CD VARCHAR(6) NOT NULL ,
        KEY_NAME VARCHAR(100) NOT NULL ,
        STRING_VAL VARCHAR(250) ,
        DATE_VAL DATETIME DEFAULT NULL ,
        LONG_VAL BIGINT ,
        DOUBLE_VAL DOUBLE(10,2),
        IDENTIFYING CHAR(1) NOT NULL ,
        constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
        references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);


CREATE TABLE BATCH_STEP_EXECUTION  (
  STEP_EXECUTION_ID BIGINT  PRIMARY KEY ,
  VERSION BIGINT NOT NULL,
  STEP_NAME VARCHAR(100) NOT NULL,
  JOB_EXECUTION_ID BIGINT NOT NULL,
  START_TIME TIMESTAMP NOT NULL ,
  END_TIME TIMESTAMP  NULL,
  STATUS VARCHAR(10),
  COMMIT_COUNT BIGINT ,
  READ_COUNT BIGINT ,
  FILTER_COUNT BIGINT ,
  WRITE_COUNT BIGINT ,
  READ_SKIP_COUNT BIGINT ,
  WRITE_SKIP_COUNT BIGINT ,
  PROCESS_SKIP_COUNT BIGINT ,
  ROLLBACK_COUNT BIGINT ,
  EXIT_CODE VARCHAR(20) ,
  EXIT_MESSAGE VARCHAR(2500) ,
  LAST_UPDATED TIMESTAMP,
  constraint JOB_EXECUTION_STEP_FK foreign key (JOB_EXECUTION_ID)
  references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
  JOB_EXECUTION_ID BIGINT PRIMARY KEY,
  SHORT_CONTEXT VARCHAR(2500) NOT NULL,
  SERIALIZED_CONTEXT BLOB,
  constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
  references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
  STEP_EXECUTION_ID BIGINT PRIMARY KEY,
  SHORT_CONTEXT VARCHAR(2500) NOT NULL,
  SERIALIZED_CONTEXT BLOB,
  constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
  references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ;

# Feadback management system tables (batch): 
#1.OutReachEventInformation--->ExistingEventDetails
CREATE TABLE OutReachEventInformation(
OutReachEventInformId int(100) NOT NULL AUTO_INCREMENT,
EventID	VARCHAR(20) NOT NULL,
BaseLocation VARCHAR(50) NOT NULL,	
BeneficiaryName	VARCHAR(200) NOT NULL,
CouncilName	VARCHAR(50) NOT NULL,
EventName VARCHAR(100) NOT NULL,	
EventDescription VARCHAR(500) NOT NULL,
EventDate DATE NOT NULL,	
EmployeeID	int(6),
EmployeeName VARCHAR(50) NOT NULL,		
VolunteerHours	Double(10,2),
TravelHours	Double(10,2),
LivesImpacted Double(10,2),
BusinessUnit VARCHAR(50) NOT NULL,		
Status VARCHAR(50) NOT NULL,	
IIEPCategory VARCHAR(100) NOT NULL,
PRIMARY KEY(OutReachEventInformId)
);

#2.OutreachEventsSummary-->EventsSummary
CREATE TABLE OutreachEventsSummary(
OutreachEventsSummaryId int NOT NULL AUTO_INCREMENT,
EventID	VARCHAR(50) NOT NULL,
Months VARCHAR(5) NOT NULL,	
BaseLocation VARCHAR(50) NOT NULL,	
BeneficiaryName	VARCHAR(300) NOT NULL,
VenueAddress VARCHAR(300) NOT NULL,	
CouncilName	VARCHAR(50) NOT NULL,
Project	VARCHAR(50) NOT NULL,
Category VARCHAR(50) NOT NULL,
EventName VARCHAR(300) NOT NULL,	
EventDescription VARCHAR(300) NOT NULL,	
EventDate DATE NOT NULL,
Totalnoofvolunteers Double(10,2),	
TotalVolunteerHours	Double(10,2),
TotalTravelHours Double(10,2),	
OverallVolunteeringHours Double(10,2),	
LivesImpacted Double(10,2),	
ActivityType Double(10,2),	
summary_Status	VARCHAR(50) NOT NULL,
POCID VARCHAR(50) NOT NULL,	
POCName VARCHAR(50) NOT NULL,	
POCContactNumber VARCHAR(50) NOT NULL,
PRIMARY KEY(OutreachEventsSummaryId)
);
  
#3.VolunteerEnrollmentDetailsUnregistered_notattend
CREATE TABLE VolunteerEnrollmentDetailsUnregistered_notattend(
VolunteerEnrollmentId int NOT NULL AUTO_INCREMENT,
EventID	VARCHAR(50) NOT NULL,
EventName VARCHAR(50) NOT NULL,	
BeneficiaryName	VARCHAR(50) NOT NULL,
BaseLocation VARCHAR(50) NOT NULL,	
EventDate DATE NOT NULL,	
EmployeeID int(6),
EnrollmentDetailNotAttend BOOLEAN,
EnrollmentDetailsUnregistered BOOLEAN,
FeedbackQuestionId int(50),
PRIMARY KEY(VolunteerEnrollmentId)); 





